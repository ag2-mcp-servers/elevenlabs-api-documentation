# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:56:14+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class AddVoiceResponseModel(BaseModel):
    voice_id: str = Field(..., title='Voice Id')


class BodyAddVoiceV1VoicesAddPost(BaseModel):
    description: Optional[str] = Field(
        None, description='How would you describe the voice?', title='Description'
    )
    files: List[bytes] = Field(
        ...,
        description='One or more audio files to clone the voice from',
        title='Files',
    )
    labels: Optional[str] = Field(
        None, description='Serialized labels dictionary for the voice.', title='Labels'
    )
    name: str = Field(
        ...,
        description='The name that identifies this voice. This will be displayed in the dropdown of the website.',
        title='Name',
    )


class BodyDeleteHistoryItemsV1HistoryDeletePost(BaseModel):
    history_item_ids: List[str] = Field(
        ...,
        description='A list of history items to remove, you can get IDs of history items and other metadata using the GET https://api.elevenlabs.io/v1/history endpoint.',
        title='History Item Ids',
    )


class BodyDownloadHistoryItemsV1HistoryDownloadPost(BaseModel):
    history_item_ids: List[str] = Field(
        ...,
        description='A list of history items to download, you can get IDs of history items and other metadata using the GET https://api.elevenlabs.io/v1/history endpoint.',
        title='History Item Ids',
    )


class BodyEditVoiceV1VoicesVoiceIdEditPost(BaseModel):
    description: Optional[str] = Field(
        None, description='How would you describe the voice?', title='Description'
    )
    files: Optional[List[bytes]] = Field(
        None, description='Audio files to add to the voice', title='Files'
    )
    labels: Optional[str] = Field(
        None, description='Serialized labels dictionary for the voice.', title='Labels'
    )
    name: str = Field(
        ...,
        description='The name that identifies this voice. This will be displayed in the dropdown of the website.',
        title='Name',
    )


class Currency(Enum):
    usd = 'usd'
    eur = 'eur'


class Status(Enum):
    trialing = 'trialing'
    active = 'active'
    incomplete = 'incomplete'
    incomplete_expired = 'incomplete_expired'
    past_due = 'past_due'
    canceled = 'canceled'
    unpaid = 'unpaid'
    free = 'free'


class FeedbackResponseModel(BaseModel):
    audio_quality: bool = Field(..., title='Audio Quality')
    emotions: bool = Field(..., title='Emotions')
    feedback: str = Field(..., title='Feedback')
    glitches: bool = Field(..., title='Glitches')
    inaccurate_clone: bool = Field(..., title='Inaccurate Clone')
    other: bool = Field(..., title='Other')
    review_status: Optional[str] = Field('not_reviewed', title='Review Status')
    thumbs_up: bool = Field(..., title='Thumbs Up')


class FinetuningState(Enum):
    not_started = 'not_started'
    is_fine_tuning = 'is_fine_tuning'
    fine_tuned = 'fine_tuned'


class State(Enum):
    created = 'created'
    deleted = 'deleted'
    processing = 'processing'


class HistoryItemResponseModel(BaseModel):
    character_count_change_from: int = Field(..., title='Character Count Change From')
    character_count_change_to: int = Field(..., title='Character Count Change To')
    content_type: str = Field(..., title='Content Type')
    date_unix: int = Field(..., title='Date Unix')
    feedback: FeedbackResponseModel
    history_item_id: str = Field(..., title='History Item Id')
    request_id: str = Field(..., title='Request Id')
    settings: Dict[str, Any] = Field(..., title='Settings')
    state: State = Field(..., title='State')
    text: str = Field(..., title='Text')
    voice_id: str = Field(..., title='Voice Id')
    voice_name: str = Field(..., title='Voice Name')


class InvoiceResponseModel(BaseModel):
    amount_due_cents: int = Field(..., title='Amount Due Cents')
    next_payment_attempt_unix: int = Field(..., title='Next Payment Attempt Unix')


class LanguageResponseModel(BaseModel):
    display_name: str = Field(..., title='Display Name')
    iso_code: str = Field(..., title='Iso Code')


class RecordingResponseModel(BaseModel):
    mime_type: str = Field(..., title='Mime Type')
    recording_id: str = Field(..., title='Recording Id')
    size_bytes: int = Field(..., title='Size Bytes')
    transcription: str = Field(..., title='Transcription')
    upload_date_unix: int = Field(..., title='Upload Date Unix')


class SampleResponseModel(BaseModel):
    file_name: str = Field(..., title='File Name')
    hash: str = Field(..., title='Hash')
    mime_type: str = Field(..., title='Mime Type')
    sample_id: str = Field(..., title='Sample Id')
    size_bytes: int = Field(..., title='Size Bytes')


class TTSModelResponseModel(BaseModel):
    display_name: str = Field(..., title='Display Name')
    model_id: str = Field(..., title='Model Id')
    supported_language: List[LanguageResponseModel] = Field(
        ..., title='Supported Language'
    )


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class VerificationAttemptResponseModel(BaseModel):
    accepted: bool = Field(..., title='Accepted')
    date_unix: int = Field(..., title='Date Unix')
    levenshtein_distance: float = Field(..., title='Levenshtein Distance')
    recording: RecordingResponseModel
    similarity: float = Field(..., title='Similarity')
    text: str = Field(..., title='Text')


class VoiceSettingsResponseModel(BaseModel):
    similarity_boost: float = Field(..., title='Similarity Boost')
    stability: float = Field(..., title='Stability')


V1VoicesVoiceIdSettingsEditPostRequest = VoiceSettingsResponseModel


class BodyTextToSpeechV1TextToSpeechVoiceIdPost(BaseModel):
    text: str = Field(
        ...,
        description='The text that will get converted into speech. Currently only English text is supported.',
        title='Text',
    )
    voice_settings: Optional[VoiceSettingsResponseModel] = Field(
        None,
        description='Voice settings overriding stored setttings for the given voice. They are applied only on the given TTS request.',
        title='Voice Settings',
    )


class BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost(BaseModel):
    text: str = Field(
        ...,
        description='The text that will get converted into speech. Currently only English text is supported.',
        title='Text',
    )
    voice_settings: Optional[VoiceSettingsResponseModel] = Field(
        None,
        description='Voice settings overriding stored setttings for the given voice. They are applied only on the given TTS request.',
        title='Voice Settings',
    )


class ExtendedSubscriptionResponseModel(BaseModel):
    allowed_to_extend_character_limit: bool = Field(
        ..., title='Allowed To Extend Character Limit'
    )
    available_models: List[TTSModelResponseModel] = Field(..., title='Available Models')
    can_extend_character_limit: bool = Field(..., title='Can Extend Character Limit')
    can_extend_voice_limit: bool = Field(..., title='Can Extend Voice Limit')
    can_use_delayed_payment_methods: bool = Field(
        ..., title='Can Use Delayed Payment Methods'
    )
    can_use_instant_voice_cloning: bool = Field(
        ..., title='Can Use Instant Voice Cloning'
    )
    can_use_professional_voice_cloning: bool = Field(
        ..., title='Can Use Professional Voice Cloning'
    )
    character_count: int = Field(..., title='Character Count')
    character_limit: int = Field(..., title='Character Limit')
    currency: Currency = Field(..., title='Currency')
    next_character_count_reset_unix: int = Field(
        ..., title='Next Character Count Reset Unix'
    )
    next_invoice: InvoiceResponseModel
    professional_voice_limit: int = Field(..., title='Professional Voice Limit')
    status: Status = Field(..., title='Status')
    tier: str = Field(..., title='Tier')
    voice_limit: int = Field(..., title='Voice Limit')


class FineTuningResponseModel(BaseModel):
    fine_tuning_requested: bool = Field(..., title='Fine Tuning Requested')
    finetuning_state: FinetuningState = Field(..., title='Finetuning State')
    is_allowed_to_fine_tune: bool = Field(..., title='Is Allowed To Fine Tune')
    model_id: str = Field(..., title='Model Id')
    slice_ids: List[str] = Field(..., title='Slice Ids')
    verification_attempts: List[VerificationAttemptResponseModel] = Field(
        ..., title='Verification Attempts'
    )
    verification_attempts_count: int = Field(..., title='Verification Attempts Count')
    verification_failures: List[str] = Field(..., title='Verification Failures')


class GetHistoryResponseModel(BaseModel):
    history: List[HistoryItemResponseModel] = Field(..., title='History')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class SubscriptionResponseModel(BaseModel):
    allowed_to_extend_character_limit: bool = Field(
        ..., title='Allowed To Extend Character Limit'
    )
    available_models: List[TTSModelResponseModel] = Field(..., title='Available Models')
    can_extend_character_limit: bool = Field(..., title='Can Extend Character Limit')
    can_extend_voice_limit: bool = Field(..., title='Can Extend Voice Limit')
    can_use_delayed_payment_methods: bool = Field(
        ..., title='Can Use Delayed Payment Methods'
    )
    can_use_instant_voice_cloning: bool = Field(
        ..., title='Can Use Instant Voice Cloning'
    )
    can_use_professional_voice_cloning: bool = Field(
        ..., title='Can Use Professional Voice Cloning'
    )
    character_count: int = Field(..., title='Character Count')
    character_limit: int = Field(..., title='Character Limit')
    currency: Currency = Field(..., title='Currency')
    next_character_count_reset_unix: int = Field(
        ..., title='Next Character Count Reset Unix'
    )
    professional_voice_limit: int = Field(..., title='Professional Voice Limit')
    status: Status = Field(..., title='Status')
    tier: str = Field(..., title='Tier')
    voice_limit: int = Field(..., title='Voice Limit')


class UserResponseModel(BaseModel):
    is_new_user: bool = Field(..., title='Is New User')
    subscription: SubscriptionResponseModel
    xi_api_key: str = Field(..., title='Xi Api Key')


class VoiceResponseModel(BaseModel):
    available_for_tiers: List[str] = Field(..., title='Available For Tiers')
    category: str = Field(..., title='Category')
    description: str = Field(..., title='Description')
    fine_tuning: FineTuningResponseModel
    labels: Dict[str, str] = Field(..., title='Labels')
    name: str = Field(..., title='Name')
    preview_url: str = Field(..., title='Preview Url')
    samples: List[SampleResponseModel] = Field(..., title='Samples')
    settings: VoiceSettingsResponseModel
    voice_id: str = Field(..., title='Voice Id')


class GetVoicesResponseModel(BaseModel):
    voices: List[VoiceResponseModel] = Field(..., title='Voices')
